$breakpoints: (
  xs: 576px,
  sm: 768px,
  md: 992px,
  lg: 1200px,
  xl: 1600px,
);

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {
  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }

    // If one or both of the breakpoints don't exist.
  } @else {
    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {
      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {
      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

.participate {
  margin-top: 100px;
  min-height: 60vh;
  background-position: center;
  background-size: 100%;
  background-repeat: no-repeat;
  background-image: url("../../assets/images/participate/participate-bg.svg");
  p {
    font-size: 1.1rem;
    @include respond-below(md) {
      font-size: 0.9rem;
    }
  }
  .carousel-indicators {
    margin-bottom: -2%;
    z-index: 1;
  }
  .carousel-inner {
    position: relative;
    width: 100%;
    overflow: hidden;
    color: #000;
    border-radius: 10px;
  }

  .carousel-item {
    padding: 5% 15%;
    text-align: center;
    img {
      border-radius: 20px;
      border: 0;
      @include respond-below(md) {
        border-radius: 5px;
      }
    }
  }
  .name {
    font-size: 16px;
  }

  .carousel-control-next span:first-child,
  .carousel-control-prev span:first-child {
    background-color: transparent;
    width: 5px !important;
  }

  @include respond-below(md) {
    .arrows {
      width: 20px;
    }
  }

  .btn-danger {
    background-color: #ff2800 !important;
  }
}
